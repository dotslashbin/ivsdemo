name: IVS Demo Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-api-app:
    name: Building prod files
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install && npm install typescript ts-loader ts-node
      working-directory: api
    - run: npm ci
      working-directory: api
    
    - run: tsc -p .
      working-directory: api
  
    - name: prepare the build artifacts
      uses: actions/upload-artifact@v2
      with: 
        name: dist-folder
        path: api/dist
        
  create-app-image:
    needs: build-api-app
    name: Create app image in ECR
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: fetch build-artifacts
      uses: actions/download-artifact@v2
      with:
        name: dist-folder
        path: api/dist

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ivsapi
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      working-directory: api
    
  ec2-deployment:
    needs: create-app-image
    name: Deploy app in server
    runs-on: ubuntu-latest
      
    steps:
    - name: Shutdown current servers
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST_IP }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: docker-compose-prod.yaml
        target: /home/${{ secrets.EC2_USERNAME }}
        script: |
          docker-compose down
          doker system prune -f
          docker images prune --force
      
    - name: Deploy new app and run
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST_IP }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: docker-compose-prod.yaml
        target: /home/${{ secrets.EC2_USERNAME }}
        script: |
          docker-compose up -d